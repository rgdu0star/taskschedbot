# -*- coding: utf-8 -*-

import datetime
import locale
import os

import telebot
import yaml

bot = telebot.TeleBot(os.environ['TOKEN'])

main_btns = ('üìò –°—å–æ–≥–æ–¥–Ω—ñ', 'üìó –ó–∞–≤—Ç—Ä–∞', 'üìÖ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å', 'üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤')
week_btns = ('–ü–Ω', '–í—ñ', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è')

main_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
main_markup.row(*main_btns[:2])
main_markup.row(main_btns[2])
main_markup.row(main_btns[3])

week_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
week_markup.row(*week_btns[:5])
week_markup.row(week_btns[5])
week_markup.row(week_btns[6])


def parser(src):
    return ['{}\n`({}, {})`'.format(*x) if isinstance(x, list) else x for x in src]


@bot.message_handler(commands=['start'])
def welcome(message):
    text = '–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥  üòâ'
    bot.send_message(message.chat.id, text, reply_markup=main_markup)


@bot.message_handler(func=lambda msg: msg.text in main_btns[:2])
def today_timetable(message):
    with open('timetable.yml', 'r') as f:
        timetable = yaml.load(f)
    tomorrow = message.text == main_btns[1]
    today = datetime.date.today() + datetime.timedelta(days=tomorrow)
    is_numerator = today.isocalendar()[0] % 2
    text = '*–†–æ–∑–∫–ª–∞–¥ –Ω–∞ {}:*\n'.format(message.text[2:].lower())
    text += '\n'.join(parser(timetable[today.strftime("%A")][is_numerator]))
    bot.send_message(message.chat.id, text, parse_mode='Markdown')


@bot.message_handler(func=lambda msg: msg.text == main_btns[2])
def week_msg(message):
    bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å —Ç–∏–∂–Ω—è:', reply_markup=week_markup)


@bot.message_handler(func=lambda msg: msg.text in week_btns)
def week_timetable(message):
    with open('timetable.yml', 'r') as f:
        timetable = yaml.load(f)
    index = week_btns.index(message.text)
    ru = ('–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü\'—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è')
    text = '*{}:*\n'.format(ru[index])
    timetable = tuple(timetable.values())[index]
    if timetable[0] == timetable[1]:
        text += '\n'.join(parser(timetable[0]))
    else:
        text += '*–ù–Ü:*\n{}\n\n'.format('\n'.join(parser(timetable[0])))
        text += '*–î–Ü:*\n{}'.format('\n'.join(parser(timetable[1])))
    bot.send_message(message.chat.id, text, reply_markup=main_markup, parse_mode='Markdown')


@bot.message_handler(func=lambda msg: msg.text == main_btns[3])
def bells_msg(message):
    text = (
        '*–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤:*\n'
        '1. 8:00 - 9:20\n'
        '2. 9:35 - 10:55\n'
        '3. 11:10 - 12:30\n'
        '4. 12:45 - 14:05\n')
    bot.send_message(message.chat.id, text, parse_mode='Markdown')


@bot.message_handler(func=lambda msg: True)
def error_msg(message):
    bot.reply_to(message, '–©–æ—Å—å —è —Ç–µ–±–µ –Ω–µ —Ä–æ–∑—É–º—ñ—é, –Ω–∞–∂–∞–ª—å üò¢', reply_markup=main_markup)


bot.polling()
